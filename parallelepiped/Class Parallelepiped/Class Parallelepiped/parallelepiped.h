#pragma once
#define _USE_MATH_DEFINES  // Подключаем мат. константы из math.h ради M_PI
#include <math.h>  // Библиотека для реализации мат. формул

// Класс параллелепипед
// Автор Занин Вячеслав ВМК-21
// В ../../adt.md есть фото параллелепипеда с названиями точек
class Parallelepiped {
// Закрытый от пользователя раздел. Со всеми переменными мы будем взаимодействовать через public
private:
	// Боковое ребро основания
	float ab_line = 0;
	// Лицевое ребро основания
	float bc_line = 0;
	// Боковое ребро параллелепипеда
	float side_line = 0;

	// Один из углов основания
	float bad_angle = 90;
	// Один из углов лицевой грани
	float a1ad_angle = 90;
	// Один из углов боковой грани
	float a1ab_angle = 90;

	// Коэфициент для перевода из градусов в радианы
	// Имеет смысл скрыть, чтобы пользователь не мог "крутить" это значение
	static inline float convert_to_rad_k { M_PI / 180 };
	// static позволяет иметь переменную, которая будет относиться ко всем объектам класса
	// То есть если в программе определен тип Parallelepiped без инициализации хотя бы одного объекта
	// то у нас будет известно статическое поле класса. Это полезно, к примеру, для создания счетчика созданных членов класса
	// 
	// inline -- втроенная функция, которая говорит компилятору заменить код convert_to_rad_k на его содержимое

public:
	// Безпараметрический конструктор класса
	// Инициализирует объект класса со значениями по умолчанию (все ребра равны 0, а все углы 90)
	Parallelepiped();

	// Параметрический конструктор класса
	// Инициализирует объект класса с указанными пользователем значениями, если это возможно
	Parallelepiped(float pab_line, float pbc_line, float pside_line, float pbad_angle = 90, float pa1ad_angle = 90, float pa1ab_angle = 90);

	// Возвращает значение бокового ребра основания
	float getLineAB() const;
	// const здесь означает, что у функции ограничение на использование 
	// То есть если функция объявлена с константным указателем this,
	// то в теле функции запрещается изменять данные класса

	// Возвращает значение лицевого ребра основания
	float getLineBC() const;

	// Возвращает значение бокового ребра параллелепипеда
	float getLineSide() const;


	// Возвращает значение одного из углов основания
	float getAngleBAD() const;

	// Возвращает значение одного из углов лицевой грани
	float getAngleA1AD() const;

	// Возвращает значение одного из углов боковой грани
	float getAngleA1AB() const;


	// Возвращает строку с названием типа параллелепипеда
	// inclined -- наклонный параллелепипед
	// straight -- прямой параллелепипед (высота параллелепипеда равна боковому ребру)
	// cuboid -- прямоугольный параллелепипед (все грани -- прямоугольники)
	// rhombohedron -- ромбоэдр (все грани -- ромбы)
	// cube -- куб (все грани -- квадраты)
	std::string getType() const;


	// Возвращает длину диагонали AC
	// Формула, по которой идет подсчет, написана в ../../adt.md
	float getBaseFirstDiagonal() const;

	// Возвращает длину диагонали BD
	// Формула, по которой идет подсчет, написана в ../../adt.md
	float getBaseSecondDiagonal() const;

	// Возвращает длину диагонали A1D
	// Формула, по которой идет подсчет, написана в ../../adt.md
	float getFrontFirstDiagonal() const;

	// Возвращает длину диагонали AB1
	// Формула, по которой идет подсчет, написана в ../../adt.md
	float getFrontSecondDiagonal() const;

	// Возвращает длину диагонали A1B
	// Формула, по которой идет подсчет, написана в ../../adt.md
	float getSideFirstDiagonal() const;

	// Возвращает длину диагонали B1A
	// Формула, по которой идет подсчет, написана в ../../adt.md
	float getSideSecondDiagonal() const;


	// Возвращает угол A1AC
	// Формула, по которой идет подсчет, написана в ../../adt.md
	float getSideAndBaseDiagonalAngle() const;


	// Вовращает высоту грани от B до AD
	// Формула, по которой идет подсчет, написана в ../../adt.md
	float getBaseFirstHeight() const;

	// Вовращает высоту грани от A до CD
	// Формула, по которой идет подсчет, написана в ../../adt.md
	float getBaseSecondHeight() const;

	// Вовращает высоту грани от A1 до AD
	// Формула, по которой идет подсчет, написана в ../../adt.md
	float getFrontFirstHeight() const;

	// Вовращает высоту грани от A до DD1
	// Формула, по которой идет подсчет, написана в ../../adt.md
	float getFrontSecondHeight() const;

	// Возвращает высоту грани от A1 до AB
	// Формула, по которой идет подсчет, написана в ../../adt.md
	float getSideFirstHeight() const;

	// Возвращает высоту грани от A1 до BB1
	// Формула, по которой идет подсчет, написана в ../../adt.md
	float getSideSecondHeight() const;

	// Возвращает высоту параллелепипеда
	float getMainHeight() const;


	// Возвращает площадь лицевой грани
	float getFrontSquare() const;

	// Возвращает площадь боковой грани
	float getSideSquare() const;

	// Возвращает площадь основания
	float getBaseSquare() const;

	// Возвращает площадь боковых граней
	float getFrontsAndSidesSquare() const;

	// Возвращает площадь поверхности
	float getFullSquare() const;


	// Возвращает объем
	float getVolume() const;


	// Возвращает true, если значение бокового ребра основания было успешно изменено
	bool setLineAB(float pab_line);

	// Возвращает true, если значение лицевого ребра основания было успешно изменено
	bool setLineBC(float pbc_line);
	
	// Возвращает true, если значение бокового ребра параллелепипеда было успешно изменено
	bool setLineSide(float pside_line);


	// Возвращает true, если значение одного из углов основания было успешно изменено
	bool setAngleBAD(float pbad_angle);

	// Возвращает true, если значение одного из углов лицевой грани было успешно изменено
	bool setAngleA1AD(float pa1ad_angle);

	// Возвращает true, если значение одного из углов боковой грани было успешно изменено
	bool setAngleA1AB(float pa1ab_angle);
};
